# These are Cloud Build steps. You can read more about cloud build here: 
# https://cloud.google.com/cloud-build/docs/
# All these steps sharing a filesystem between each other.
steps:
# ↓↓↓↓↓↓↓ Start of Continuous Integration Part ↓↓↓↓↓↓↓↓↓↓↓↓ #####
######### This part will test if Notebook fully executable #####
  # First, we need to clone the repository that we need to test.
  # This will also clone submodules that are used as dependancies.
- name: 'gcr.io/cloud-builders/git'
  args: ['clone', '--recurse-submodules', 'https://github.com/norbert-liki/notebooks-ci-demo']
  # Next, we need to checkout the exact commit that we need to test. Otherwise, Cloud Build will be testing the master.
  # Variable $COMMIT_SHA provided by the Cloud Build. You can find more about Cloud Build variables here:
  # https://cloud.google.com/cloud-build/docs/configuring-builds/substitute-variable-values
- name: 'gcr.io/cloud-builders/git'
  args: ['checkout', '$COMMIT_SHA']
  dir: 'notebooks-ci-demo'
  # This will start notebook background execution.
  # You can read more about the background execution here:
  # https://blog.kovalevskyi.com/how-to-submit-jupyter-notebook-for-overnight-training-on-gcp-4ce1b0cd4d0d
- name: 'google/cloud-sdk:latest'
  args: ['-c', './run_test.sh']
  dir: 'notebooks-ci-demo'
  entrypoint: '/bin/bash'
# ↑↑↑↑↑↑↑ End of Continuous Integration Part ↑↑↑↑↑↑↑↑↑↑↑↑↑###############
######### Execution will not process further if notebook is broken #####
# ↓↓↓↓↓↓↓ Start of Continuous Delivery Part ↓↓↓↓↓↓↓↓↓↓↓↓ ################
######### This part will generate actual artifact  #####################
  # Our production system contains 2 parts
  # * Cloud function that can execute notebook daily
  # * Notebooks executor that is used by cloud function to execute notebooks
  #
  #  Next step creates an archive with notebook executor.
- name: 'google/cloud-sdk:237.0.0'
  args: ['-c', 'tar -zcvf live.tar.gz demo.ipynb gcp-notebook-executor/notebook_executor.sh gcp-notebook-executor/utils.sh run_notebook_instance.sh']
  dir: 'notebooks-ci-demo'
  entrypoint: '/bin/bash'
  # Archive uploaded to the place where the production system expects it.
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'live.tar.gz', 'gs://notebooks-ci-demo/live.tar.gz']
  dir: '.'
  # Now we zipping folder with the cloud function that we want to use on a daily basis.
- name: 'google/cloud-sdk:237.0.0'
  args: ['-c', 'apt update && apt install -y zip && zip deploy.zip *']
  dir: 'deploy'
  entrypoint: '/bin/bash'
  # Archive with cloud function uploaded to the place where the production system expects it.
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'deploy.zip', 'gs://notebooks-ci-demo/deploy.zip']
  dir: 'deploy'
  # For the next step, the cloud build service account must be granted the Cloud Functions Developer permission (not default).
- name: 'google/cloud-sdk:237.0.0'
  args: ['gcloud', 'functions', 'deploy', 'demo-notebook-function', '--trigger-topic=demo-notebook', '--region=us-central1', '--source=gs://notebooks-ci-demo/deploy.zip']
# ↑↑↑↑↑↑↑ End of Continues Delivery Part ↑↑↑↑↑↑↑↑↑↑↑↑↑##################
######### This part will generate actual artifact  #####################